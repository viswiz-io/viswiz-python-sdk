# coding: utf-8

"""
    VisWiz.io API Documentation

    This SDK allows you to query and create new projects, builds or images within the VisWiz service.   # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: support@viswiz.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Build(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'branch': 'str',
        'comparison_id': 'str',
        'created_at': 'datetime',
        'diffed_at': 'datetime',
        'diff_images_count': 'int',
        'diff_percentage': 'float',
        'id': 'str',
        'images_count': 'float',
        'name': 'str',
        'project_id': 'int',
        'revision': 'str'
    }

    attribute_map = {
        'branch': 'branch',
        'comparison_id': 'comparisonID',
        'created_at': 'createdAt',
        'diffed_at': 'diffedAt',
        'diff_images_count': 'diffImagesCount',
        'diff_percentage': 'diffPercentage',
        'id': 'id',
        'images_count': 'imagesCount',
        'name': 'name',
        'project_id': 'projectID',
        'revision': 'revision'
    }

    def __init__(self, branch=None, comparison_id=None, created_at=None, diffed_at=None, diff_images_count=None, diff_percentage=None, id=None, images_count=None, name=None, project_id=None, revision=None):  # noqa: E501
        """Build - a model defined in Swagger"""  # noqa: E501

        self._branch = None
        self._comparison_id = None
        self._created_at = None
        self._diffed_at = None
        self._diff_images_count = None
        self._diff_percentage = None
        self._id = None
        self._images_count = None
        self._name = None
        self._project_id = None
        self._revision = None
        self.discriminator = None

        if branch is not None:
            self.branch = branch
        if comparison_id is not None:
            self.comparison_id = comparison_id
        if created_at is not None:
            self.created_at = created_at
        if diffed_at is not None:
            self.diffed_at = diffed_at
        if diff_images_count is not None:
            self.diff_images_count = diff_images_count
        if diff_percentage is not None:
            self.diff_percentage = diff_percentage
        if id is not None:
            self.id = id
        if images_count is not None:
            self.images_count = images_count
        if name is not None:
            self.name = name
        if project_id is not None:
            self.project_id = project_id
        if revision is not None:
            self.revision = revision

    @property
    def branch(self):
        """Gets the branch of this Build.  # noqa: E501

        The branch which contains the build  # noqa: E501

        :return: The branch of this Build.  # noqa: E501
        :rtype: str
        """
        return self._branch

    @branch.setter
    def branch(self, branch):
        """Sets the branch of this Build.

        The branch which contains the build  # noqa: E501

        :param branch: The branch of this Build.  # noqa: E501
        :type: str
        """

        self._branch = branch

    @property
    def comparison_id(self):
        """Gets the comparison_id of this Build.  # noqa: E501

        The build ID which is used for comparison with the build  # noqa: E501

        :return: The comparison_id of this Build.  # noqa: E501
        :rtype: str
        """
        return self._comparison_id

    @comparison_id.setter
    def comparison_id(self, comparison_id):
        """Sets the comparison_id of this Build.

        The build ID which is used for comparison with the build  # noqa: E501

        :param comparison_id: The comparison_id of this Build.  # noqa: E501
        :type: str
        """

        self._comparison_id = comparison_id

    @property
    def created_at(self):
        """Gets the created_at of this Build.  # noqa: E501

        The date and time the build was created  # noqa: E501

        :return: The created_at of this Build.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Build.

        The date and time the build was created  # noqa: E501

        :param created_at: The created_at of this Build.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def diffed_at(self):
        """Gets the diffed_at of this Build.  # noqa: E501

        The date and time the build was compared  # noqa: E501

        :return: The diffed_at of this Build.  # noqa: E501
        :rtype: datetime
        """
        return self._diffed_at

    @diffed_at.setter
    def diffed_at(self, diffed_at):
        """Sets the diffed_at of this Build.

        The date and time the build was compared  # noqa: E501

        :param diffed_at: The diffed_at of this Build.  # noqa: E501
        :type: datetime
        """

        self._diffed_at = diffed_at

    @property
    def diff_images_count(self):
        """Gets the diff_images_count of this Build.  # noqa: E501

        The number of different images in the build  # noqa: E501

        :return: The diff_images_count of this Build.  # noqa: E501
        :rtype: int
        """
        return self._diff_images_count

    @diff_images_count.setter
    def diff_images_count(self, diff_images_count):
        """Sets the diff_images_count of this Build.

        The number of different images in the build  # noqa: E501

        :param diff_images_count: The diff_images_count of this Build.  # noqa: E501
        :type: int
        """

        self._diff_images_count = diff_images_count

    @property
    def diff_percentage(self):
        """Gets the diff_percentage of this Build.  # noqa: E501

        The difference percentage for the build  # noqa: E501

        :return: The diff_percentage of this Build.  # noqa: E501
        :rtype: float
        """
        return self._diff_percentage

    @diff_percentage.setter
    def diff_percentage(self, diff_percentage):
        """Sets the diff_percentage of this Build.

        The difference percentage for the build  # noqa: E501

        :param diff_percentage: The diff_percentage of this Build.  # noqa: E501
        :type: float
        """

        self._diff_percentage = diff_percentage

    @property
    def id(self):
        """Gets the id of this Build.  # noqa: E501


        :return: The id of this Build.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Build.


        :param id: The id of this Build.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def images_count(self):
        """Gets the images_count of this Build.  # noqa: E501

        The total number images in the build  # noqa: E501

        :return: The images_count of this Build.  # noqa: E501
        :rtype: float
        """
        return self._images_count

    @images_count.setter
    def images_count(self, images_count):
        """Sets the images_count of this Build.

        The total number images in the build  # noqa: E501

        :param images_count: The images_count of this Build.  # noqa: E501
        :type: float
        """

        self._images_count = images_count

    @property
    def name(self):
        """Gets the name of this Build.  # noqa: E501

        The name (commit title) for the build  # noqa: E501

        :return: The name of this Build.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Build.

        The name (commit title) for the build  # noqa: E501

        :param name: The name of this Build.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def project_id(self):
        """Gets the project_id of this Build.  # noqa: E501

        The project ID which owns the build  # noqa: E501

        :return: The project_id of this Build.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this Build.

        The project ID which owns the build  # noqa: E501

        :param project_id: The project_id of this Build.  # noqa: E501
        :type: int
        """

        self._project_id = project_id

    @property
    def revision(self):
        """Gets the revision of this Build.  # noqa: E501

        The revision for the build  # noqa: E501

        :return: The revision of this Build.  # noqa: E501
        :rtype: str
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """Sets the revision of this Build.

        The revision for the build  # noqa: E501

        :param revision: The revision of this Build.  # noqa: E501
        :type: str
        """

        self._revision = revision

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Build):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
