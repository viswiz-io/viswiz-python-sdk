# coding: utf-8

"""
    VisWiz.io API Documentation

    This SDK allows you to query and create new projects, builds or images within the VisWiz service.   # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: support@viswiz.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Body2(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'branch': 'str',
        'name': 'str',
        'revision': 'str'
    }

    attribute_map = {
        'branch': 'branch',
        'name': 'name',
        'revision': 'revision'
    }

    def __init__(self, branch=None, name=None, revision=None):  # noqa: E501
        """Body2 - a model defined in Swagger"""  # noqa: E501

        self._branch = None
        self._name = None
        self._revision = None
        self.discriminator = None

        self.branch = branch
        self.name = name
        self.revision = revision

    @property
    def branch(self):
        """Gets the branch of this Body2.  # noqa: E501

        The branch which contains the build  # noqa: E501

        :return: The branch of this Body2.  # noqa: E501
        :rtype: str
        """
        return self._branch

    @branch.setter
    def branch(self, branch):
        """Sets the branch of this Body2.

        The branch which contains the build  # noqa: E501

        :param branch: The branch of this Body2.  # noqa: E501
        :type: str
        """
        if branch is None:
            raise ValueError("Invalid value for `branch`, must not be `None`")  # noqa: E501

        self._branch = branch

    @property
    def name(self):
        """Gets the name of this Body2.  # noqa: E501

        The name (commit title) of the build  # noqa: E501

        :return: The name of this Body2.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Body2.

        The name (commit title) of the build  # noqa: E501

        :param name: The name of this Body2.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def revision(self):
        """Gets the revision of this Body2.  # noqa: E501

        The revision of the build  # noqa: E501

        :return: The revision of this Body2.  # noqa: E501
        :rtype: str
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """Sets the revision of this Body2.

        The revision of the build  # noqa: E501

        :param revision: The revision of this Body2.  # noqa: E501
        :type: str
        """
        if revision is None:
            raise ValueError("Invalid value for `revision`, must not be `None`")  # noqa: E501

        self._revision = revision

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body2):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
