# coding: utf-8

"""
    VisWiz.io API Documentation

    This SDK allows you to query and create new projects, builds or images within the VisWiz service.   # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: support@viswiz.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from viswiz_sdk.models.diff_image import DiffImage  # noqa: F401,E501
from viswiz_sdk.models.image import Image  # noqa: F401,E501


class BuildResultsImages(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'comparison': 'Image',
        'diff': 'DiffImage',
        'source': 'Image'
    }

    attribute_map = {
        'comparison': 'comparison',
        'diff': 'diff',
        'source': 'source'
    }

    def __init__(self, comparison=None, diff=None, source=None):  # noqa: E501
        """BuildResultsImages - a model defined in Swagger"""  # noqa: E501

        self._comparison = None
        self._diff = None
        self._source = None
        self.discriminator = None

        if comparison is not None:
            self.comparison = comparison
        if diff is not None:
            self.diff = diff
        if source is not None:
            self.source = source

    @property
    def comparison(self):
        """Gets the comparison of this BuildResultsImages.  # noqa: E501


        :return: The comparison of this BuildResultsImages.  # noqa: E501
        :rtype: Image
        """
        return self._comparison

    @comparison.setter
    def comparison(self, comparison):
        """Sets the comparison of this BuildResultsImages.


        :param comparison: The comparison of this BuildResultsImages.  # noqa: E501
        :type: Image
        """

        self._comparison = comparison

    @property
    def diff(self):
        """Gets the diff of this BuildResultsImages.  # noqa: E501


        :return: The diff of this BuildResultsImages.  # noqa: E501
        :rtype: DiffImage
        """
        return self._diff

    @diff.setter
    def diff(self, diff):
        """Sets the diff of this BuildResultsImages.


        :param diff: The diff of this BuildResultsImages.  # noqa: E501
        :type: DiffImage
        """

        self._diff = diff

    @property
    def source(self):
        """Gets the source of this BuildResultsImages.  # noqa: E501


        :return: The source of this BuildResultsImages.  # noqa: E501
        :rtype: Image
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this BuildResultsImages.


        :param source: The source of this BuildResultsImages.  # noqa: E501
        :type: Image
        """

        self._source = source

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BuildResultsImages):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
