# coding: utf-8

"""
    VisWiz.io API Documentation

    This SDK allows you to query and create new projects, builds or images within the VisWiz service.   # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: support@viswiz.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Image(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'created_at': 'datetime',
        'height': 'int',
        'original_url': 'str',
        'original_url_web_p': 'str',
        'thumb_url': 'str',
        'thumb_url_web_p': 'str',
        'width': 'int'
    }

    attribute_map = {
        'name': 'name',
        'created_at': 'createdAt',
        'height': 'height',
        'original_url': 'originalURL',
        'original_url_web_p': 'originalURLWebP',
        'thumb_url': 'thumbURL',
        'thumb_url_web_p': 'thumbURLWebP',
        'width': 'width'
    }

    def __init__(self, name=None, created_at=None, height=None, original_url=None, original_url_web_p=None, thumb_url=None, thumb_url_web_p=None, width=None):  # noqa: E501
        """Image - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._created_at = None
        self._height = None
        self._original_url = None
        self._original_url_web_p = None
        self._thumb_url = None
        self._thumb_url_web_p = None
        self._width = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if created_at is not None:
            self.created_at = created_at
        if height is not None:
            self.height = height
        if original_url is not None:
            self.original_url = original_url
        if original_url_web_p is not None:
            self.original_url_web_p = original_url_web_p
        if thumb_url is not None:
            self.thumb_url = thumb_url
        if thumb_url_web_p is not None:
            self.thumb_url_web_p = thumb_url_web_p
        if width is not None:
            self.width = width

    @property
    def name(self):
        """Gets the name of this Image.  # noqa: E501

        The identifing name of the image  # noqa: E501

        :return: The name of this Image.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Image.

        The identifing name of the image  # noqa: E501

        :param name: The name of this Image.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def created_at(self):
        """Gets the created_at of this Image.  # noqa: E501

        The date and time the image was created  # noqa: E501

        :return: The created_at of this Image.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Image.

        The date and time the image was created  # noqa: E501

        :param created_at: The created_at of this Image.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def height(self):
        """Gets the height of this Image.  # noqa: E501

        The height of the image  # noqa: E501

        :return: The height of this Image.  # noqa: E501
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this Image.

        The height of the image  # noqa: E501

        :param height: The height of this Image.  # noqa: E501
        :type: int
        """

        self._height = height

    @property
    def original_url(self):
        """Gets the original_url of this Image.  # noqa: E501

        The URL for the original image  # noqa: E501

        :return: The original_url of this Image.  # noqa: E501
        :rtype: str
        """
        return self._original_url

    @original_url.setter
    def original_url(self, original_url):
        """Sets the original_url of this Image.

        The URL for the original image  # noqa: E501

        :param original_url: The original_url of this Image.  # noqa: E501
        :type: str
        """

        self._original_url = original_url

    @property
    def original_url_web_p(self):
        """Gets the original_url_web_p of this Image.  # noqa: E501

        The URL for the original image in WebP format  # noqa: E501

        :return: The original_url_web_p of this Image.  # noqa: E501
        :rtype: str
        """
        return self._original_url_web_p

    @original_url_web_p.setter
    def original_url_web_p(self, original_url_web_p):
        """Sets the original_url_web_p of this Image.

        The URL for the original image in WebP format  # noqa: E501

        :param original_url_web_p: The original_url_web_p of this Image.  # noqa: E501
        :type: str
        """

        self._original_url_web_p = original_url_web_p

    @property
    def thumb_url(self):
        """Gets the thumb_url of this Image.  # noqa: E501

        The URL for the thumbnail image  # noqa: E501

        :return: The thumb_url of this Image.  # noqa: E501
        :rtype: str
        """
        return self._thumb_url

    @thumb_url.setter
    def thumb_url(self, thumb_url):
        """Sets the thumb_url of this Image.

        The URL for the thumbnail image  # noqa: E501

        :param thumb_url: The thumb_url of this Image.  # noqa: E501
        :type: str
        """

        self._thumb_url = thumb_url

    @property
    def thumb_url_web_p(self):
        """Gets the thumb_url_web_p of this Image.  # noqa: E501

        The URL for the thumbnail image in WebP format  # noqa: E501

        :return: The thumb_url_web_p of this Image.  # noqa: E501
        :rtype: str
        """
        return self._thumb_url_web_p

    @thumb_url_web_p.setter
    def thumb_url_web_p(self, thumb_url_web_p):
        """Sets the thumb_url_web_p of this Image.

        The URL for the thumbnail image in WebP format  # noqa: E501

        :param thumb_url_web_p: The thumb_url_web_p of this Image.  # noqa: E501
        :type: str
        """

        self._thumb_url_web_p = thumb_url_web_p

    @property
    def width(self):
        """Gets the width of this Image.  # noqa: E501

        The width of the image  # noqa: E501

        :return: The width of this Image.  # noqa: E501
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this Image.

        The width of the image  # noqa: E501

        :param width: The width of this Image.  # noqa: E501
        :type: int
        """

        self._width = width

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Image):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
