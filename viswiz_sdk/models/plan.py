# coding: utf-8

"""
    VisWiz.io API Documentation

    This SDK allows you to query and create new projects, builds or images within the VisWiz service.   # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: support@viswiz.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from viswiz_sdk.models.plan_price import PlanPrice  # noqa: F401,E501


class Plan(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'capabilities': 'object',
        'id': 'int',
        'external_id': 'str',
        'name': 'str',
        'price': 'PlanPrice'
    }

    attribute_map = {
        'capabilities': 'capabilities',
        'id': 'id',
        'external_id': 'externalID',
        'name': 'name',
        'price': 'price'
    }

    def __init__(self, capabilities=None, id=None, external_id=None, name=None, price=None):  # noqa: E501
        """Plan - a model defined in Swagger"""  # noqa: E501

        self._capabilities = None
        self._id = None
        self._external_id = None
        self._name = None
        self._price = None
        self.discriminator = None

        if capabilities is not None:
            self.capabilities = capabilities
        if id is not None:
            self.id = id
        if external_id is not None:
            self.external_id = external_id
        if name is not None:
            self.name = name
        if price is not None:
            self.price = price

    @property
    def capabilities(self):
        """Gets the capabilities of this Plan.  # noqa: E501

        The capabilities of the plan  # noqa: E501

        :return: The capabilities of this Plan.  # noqa: E501
        :rtype: object
        """
        return self._capabilities

    @capabilities.setter
    def capabilities(self, capabilities):
        """Sets the capabilities of this Plan.

        The capabilities of the plan  # noqa: E501

        :param capabilities: The capabilities of this Plan.  # noqa: E501
        :type: object
        """

        self._capabilities = capabilities

    @property
    def id(self):
        """Gets the id of this Plan.  # noqa: E501


        :return: The id of this Plan.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Plan.


        :param id: The id of this Plan.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def external_id(self):
        """Gets the external_id of this Plan.  # noqa: E501

        The ID of the plan on the provider's end  # noqa: E501

        :return: The external_id of this Plan.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this Plan.

        The ID of the plan on the provider's end  # noqa: E501

        :param external_id: The external_id of this Plan.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def name(self):
        """Gets the name of this Plan.  # noqa: E501

        The name of the plan  # noqa: E501

        :return: The name of this Plan.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Plan.

        The name of the plan  # noqa: E501

        :param name: The name of this Plan.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def price(self):
        """Gets the price of this Plan.  # noqa: E501


        :return: The price of this Plan.  # noqa: E501
        :rtype: PlanPrice
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Plan.


        :param price: The price of this Plan.  # noqa: E501
        :type: PlanPrice
        """

        self._price = price

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Plan):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
