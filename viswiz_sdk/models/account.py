# coding: utf-8

"""
    VisWiz.io API Documentation

    This SDK allows you to query and create new projects, builds or images within the VisWiz service.   # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: support@viswiz.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from viswiz_sdk.models.account_api_keys import AccountApiKeys  # noqa: F401,E501
from viswiz_sdk.models.account_plan import AccountPlan  # noqa: F401,E501


class Account(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'api_keys': 'list[AccountApiKeys]',
        'created_at': 'datetime',
        'email': 'str',
        'first_name': 'str',
        'id': 'str',
        'last_name': 'str',
        'plan': 'AccountPlan'
    }

    attribute_map = {
        'api_keys': 'apiKeys',
        'created_at': 'createdAt',
        'email': 'email',
        'first_name': 'firstName',
        'id': 'id',
        'last_name': 'lastName',
        'plan': 'plan'
    }

    def __init__(self, api_keys=None, created_at=None, email=None, first_name=None, id=None, last_name=None, plan=None):  # noqa: E501
        """Account - a model defined in Swagger"""  # noqa: E501

        self._api_keys = None
        self._created_at = None
        self._email = None
        self._first_name = None
        self._id = None
        self._last_name = None
        self._plan = None
        self.discriminator = None

        if api_keys is not None:
            self.api_keys = api_keys
        if created_at is not None:
            self.created_at = created_at
        if email is not None:
            self.email = email
        if first_name is not None:
            self.first_name = first_name
        if id is not None:
            self.id = id
        if last_name is not None:
            self.last_name = last_name
        if plan is not None:
            self.plan = plan

    @property
    def api_keys(self):
        """Gets the api_keys of this Account.  # noqa: E501

        List of API keys available for the account  # noqa: E501

        :return: The api_keys of this Account.  # noqa: E501
        :rtype: list[AccountApiKeys]
        """
        return self._api_keys

    @api_keys.setter
    def api_keys(self, api_keys):
        """Sets the api_keys of this Account.

        List of API keys available for the account  # noqa: E501

        :param api_keys: The api_keys of this Account.  # noqa: E501
        :type: list[AccountApiKeys]
        """

        self._api_keys = api_keys

    @property
    def created_at(self):
        """Gets the created_at of this Account.  # noqa: E501

        The date and time the account was created  # noqa: E501

        :return: The created_at of this Account.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Account.

        The date and time the account was created  # noqa: E501

        :param created_at: The created_at of this Account.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def email(self):
        """Gets the email of this Account.  # noqa: E501

        The email address for the account  # noqa: E501

        :return: The email of this Account.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Account.

        The email address for the account  # noqa: E501

        :param email: The email of this Account.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this Account.  # noqa: E501

        The first name for the account  # noqa: E501

        :return: The first_name of this Account.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Account.

        The first name for the account  # noqa: E501

        :param first_name: The first_name of this Account.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def id(self):
        """Gets the id of this Account.  # noqa: E501


        :return: The id of this Account.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Account.


        :param id: The id of this Account.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def last_name(self):
        """Gets the last_name of this Account.  # noqa: E501

        The last name for the account  # noqa: E501

        :return: The last_name of this Account.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Account.

        The last name for the account  # noqa: E501

        :param last_name: The last_name of this Account.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def plan(self):
        """Gets the plan of this Account.  # noqa: E501


        :return: The plan of this Account.  # noqa: E501
        :rtype: AccountPlan
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this Account.


        :param plan: The plan of this Account.  # noqa: E501
        :type: AccountPlan
        """

        self._plan = plan

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Account):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
