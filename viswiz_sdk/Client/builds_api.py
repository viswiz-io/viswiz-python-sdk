# coding: utf-8

"""
    VisWiz.io API Documentation

    This SDK allows you to query and create new projects, builds or images within the VisWiz service.   # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: support@viswiz.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from viswiz_sdk.api_client import ApiClient


class BuildsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_build(self, project_id, body, **kwargs):  # noqa: E501
        """Create a build  # noqa: E501

        Create a new build for a project.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_build(project_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str project_id: The requested project ID (required)
        :param Body2 body: (required)
        :return: Build
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_build_with_http_info(project_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_build_with_http_info(project_id, body, **kwargs)  # noqa: E501
            return data

    def create_build_with_http_info(self, project_id, body, **kwargs):  # noqa: E501
        """Create a build  # noqa: E501

        Create a new build for a project.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_build_with_http_info(project_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str project_id: The requested project ID (required)
        :param Body2 body: (required)
        :return: Build
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_build" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `create_build`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_build`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectID'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{projectID}/builds', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Build',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def finish_build(self, build_id, **kwargs):  # noqa: E501
        """Finish a build  # noqa: E501

        Finish a build when all images have been created. This triggers the actual build comparison to execute.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.finish_build(build_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str build_id: The requested build ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.finish_build_with_http_info(build_id, **kwargs)  # noqa: E501
        else:
            (data) = self.finish_build_with_http_info(build_id, **kwargs)  # noqa: E501
            return data

    def finish_build_with_http_info(self, build_id, **kwargs):  # noqa: E501
        """Finish a build  # noqa: E501

        Finish a build when all images have been created. This triggers the actual build comparison to execute.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.finish_build_with_http_info(build_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str build_id: The requested build ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['build_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method finish_build" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'build_id' is set
        if ('build_id' not in params or
                params['build_id'] is None):
            raise ValueError("Missing the required parameter `build_id` when calling `finish_build`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'build_id' in params:
            path_params['buildID'] = params['build_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/builds/{buildID}/finish', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_build_results(self, build_id, **kwargs):  # noqa: E501
        """Get results for a build  # noqa: E501

        Get the results for a build which has been compared to another build.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_build_results(build_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str build_id: The requested build ID (required)
        :return: BuildResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_build_results_with_http_info(build_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_build_results_with_http_info(build_id, **kwargs)  # noqa: E501
            return data

    def get_build_results_with_http_info(self, build_id, **kwargs):  # noqa: E501
        """Get results for a build  # noqa: E501

        Get the results for a build which has been compared to another build.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_build_results_with_http_info(build_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str build_id: The requested build ID (required)
        :return: BuildResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['build_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_build_results" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'build_id' is set
        if ('build_id' not in params or
                params['build_id'] is None):
            raise ValueError("Missing the required parameter `build_id` when calling `get_build_results`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'build_id' in params:
            path_params['buildID'] = params['build_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/builds/{buildID}/results', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BuildResults',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_builds(self, project_id, **kwargs):  # noqa: E501
        """Get builds for a project  # noqa: E501

        Get a list of all the builds for a project.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_builds(project_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str project_id: The requested project ID (required)
        :return: Builds
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_builds_with_http_info(project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_builds_with_http_info(project_id, **kwargs)  # noqa: E501
            return data

    def get_builds_with_http_info(self, project_id, **kwargs):  # noqa: E501
        """Get builds for a project  # noqa: E501

        Get a list of all the builds for a project.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_builds_with_http_info(project_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str project_id: The requested project ID (required)
        :return: Builds
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_builds" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `get_builds`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectID'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{projectID}/builds', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Builds',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
